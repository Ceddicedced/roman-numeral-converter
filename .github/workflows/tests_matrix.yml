name: matrix-tests

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - '**'

concurrency:
  group: tests-${{ github.head_ref || github.ref }}
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}

jobs:
  tests:
    name: ${{ matrix.os }} / ${{ matrix.python-version }}
    runs-on: ${{ matrix.image }}
    strategy:
      matrix:
        os: [Ubuntu, macOS, Windows]
        python-version: ["3.8", "3.9", "3.10"]
        include:
          - os: Ubuntu
            image: ubuntu-22.04
          - os: Windows
            image: windows-2022
          - os: macOS
            image: macos-12
      fail-fast: false
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Get full Python version
        id: full-python-version
        run: echo version=$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info))") >> $GITHUB_OUTPUT

      - name: Install poetry
        run: |
          python -m pip install poetry
      - name: Configure poetry
        run: |
          poetry config virtualenvs.in-project true
      - name: Cache the virtualenv
        uses: actions/cache@v2
        with:
          path: ./.venv
          key: ${{ runner.os }}-venv-${{ hashFiles('**/poetry.lock') }}

      - name: Set up cache
        uses: actions/cache@v3
        id: cache
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Ensure cache is healthy
        if: steps.cache.outputs.cache-hit == 'true'
        run: |
          # `timeout` is not available on macOS, so we define a custom function.
          [ "$(command -v timeout)" ] || function timeout() { perl -e 'alarm shift; exec @ARGV' "$@"; }

          # Using `timeout` is a safeguard against the Poetry command hanging for some reason.
          timeout 10s poetry run pip --version || rm -rf .venv

      - name: Check lock file
        run: poetry check --lock

      - name: Install dependencies
        run: poetry install

      - name: Run pytest
        run: poetry run pytest

      - name: Run mypy
        run: poetry run mypy roman_numerals_converter


  codecov:
          runs-on: ubuntu-latest
          steps:
            #----------------------------------------------
            #       check-out repo and set-up python
            #----------------------------------------------
            - uses: actions/checkout@v3
            - uses: actions/setup-python@v4
              id: setup-python
              with:
                python-version: '3.10'
            #----------------------------------------------
            #  -----  install & configure poetry  -----
            #----------------------------------------------
            - name: Install poetry
              run: |
                python -m pip install poetry
            - name: Configure poetry
              run: |
                poetry config virtualenvs.in-project true
            - name: Cache the virtualenv
              uses: actions/cache@v2
              with:
                path: ./.venv
                key: ${{ runner.os }}-venv-${{ hashFiles('**/poetry.lock') }}
            - name: Install dependencies
              run: |
                poetry install
            #----------------------------------------------
            #    run test suite and output coverage file
            #----------------------------------------------
            - name: Test with pytest
              run: poetry run pytest --cov --cov-report=xml
            #----------------------------------------------
            #             upload coverage stats
            #----------------------------------------------
            - name: Upload coverage
              uses: codecov/codecov-action@v3
              if : always()
              with:
                token: ${{ secrets.CODECOV_TOKEN }}

                file: ./coverage.xml
                fail_ci_if_error: false # default: true
